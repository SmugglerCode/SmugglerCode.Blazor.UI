using Intilium.Sandbox.Blazor.Components.UI.TreeView;
using Intilium.Sandbox.Blazor.Database;
using Intilium.Sandbox.Blazor.Database.Doc.Entities;
using Intilium.Sandbox.Blazor.Database.Doc.Repositories;
using Microsoft.AspNetCore.Components;

namespace Intilium.Sandbox.Blazor.Components.Pages.Documentation;
public partial class DocumentationPage : ComponentBase
{
    [Inject]
    public CodeGenDbContext DbContext { get; set; } = null!;

    #region properties

    public TreeViewlist<DocumentCategoryEntity> _documents { get; private set; } = new TreeViewlist<DocumentCategoryEntity>();

    /// <summary>
    /// TODO: move to the CodeBlockConfiguration object.
    /// </summary>
    private string CodeContent { get; set; } = null!;

    private DocumentCategoryRepository _categoriesRepo = null!;

    private DocumentPageRepository _documentPageRepo = null!;

    /// <summary>
    /// Gets or sets the active column. The setter is private and can only be set from within this class.
    /// </summary>
    public DocumentColumn? ActiveColumn { get; private set; } = null;

    private DocumentPagePartEntity? _activePagePart = null!;

    public DocumentPageEntity? DocumentPage { get; set; }

    #endregion

    #region fields

    private bool ShowEditor { get; set; }

    private bool ShowCategoryEditor { get; set; } = false;

    /// <summary>
    /// The number of columns to be generated by default 3.
    /// </summary>
    private int numberOfColumns = 3;

    #endregion

    #region methods

    public void SetActivePagePart(DocumentPagePartEntity pagePart)
    {
        if (_activePagePart != null)
            _activePagePart.IsActive = false;

        _activePagePart = pagePart;
        _activePagePart.IsActive = true;
    }

    public void RemovePagePart(DocumentPagePartEntity pagePart)
    {
        if (DocumentPage != null)
        {
            DocumentPage.PageParts.Remove(pagePart);
        }
    }

    public void SetActiveColumn(DocumentColumn column)
    {
        if (this.ActiveColumn != null)
        {
            this.ActiveColumn.IsActive = false;
        }

        this.ActiveColumn = column;
        this.ActiveColumn.IsActive = true;
    }

    protected override void OnInitialized()
    {
        _categoriesRepo = new DocumentCategoryRepository(DbContext);
        _documentPageRepo = new DocumentPageRepository(DbContext);

        DocumentPage = new();
        var categories = _categoriesRepo.GetAll();
        CategoryHelper.ConvertCategoriesToTreeView(categories, _documents.Items, null);
    }

    #endregion
    private void HandleCode(ChangeEventArgs args)
    {
        if (args != null && args.Value != null)
        {
            CodeContent = args.Value.ToString()!;
        }
    }

    private string CreateGridTemplateColumns()
    {
        var template = string.Empty;

        for (var i = 0; i < 3; i++)
        {
            template += "1fr ";
        }

        template = $"grid-template-columns: {template};";
        template += "grid-auto-rows: minmax(20em, auto);";

        return template;
    }

    private async Task SelectDocument(DocumentCategoryEntity category)
    {
        if (category.IsDocumentationPage)
        {
            DocumentPage = await _documentPageRepo.GetOrCreatePageByCategoryId(category.Id);
        }
    }

    private void CreateRow()
    {
        if (DocumentPage != null)
        {
            var maxRow = DocumentPage.PageParts.Max(x => x.Row);

            for (var i = 0; i < numberOfColumns; i++)
            {
                var pagePart = new DocumentPagePartEntity()
                {
                    Row = (short)(maxRow + 1),
                    Column = (short)(i + 1),
                    RowSpan = 1,
                    ColumnSpan = 1,
                    Width = "1fr"
                };
                DocumentPage.PageParts.Add(pagePart);

            }
        }
    }

    private async Task SaveDocumentPage()
    {
        if (DocumentPage != null)
            await _documentPageRepo.Update(DocumentPage);
    }

    private void RemoveColumn(DocumentColumn column)
    {
        var row = column.Parent;
        row.Columns.Remove(column);
    }

    private void ShowCategoryEditorHandler()
    {
        ShowCategoryEditor = true;
    }
}
